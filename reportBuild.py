#!/usr/bin/env python


#############################################################################
##
## Copyright (C) 2016 Pradeep Kumar Yadav.
## All rights reserved.
##
##
##
## "Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are
## met:
##   * Redistributions of source code must retain the above copyright
##     notice, this list of conditions and the following disclaimer.
##   * Redistributions in binary form must reproduce the above copyright
##     notice, this list of conditions and the following disclaimer in
##     the documentation and/or other materials provided with the
##     distribution.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
## "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
## A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
## OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
## OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
##
#############################################################################

from reportlab import *
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm, mm
from reportlab.lib import colors , utils
from reportlab.platypus import Paragraph, Table, TableStyle, Image, Frame, Spacer, PageBreak, BaseDocTemplate, PageTemplate, SimpleDocTemplate, Flowable
from PIL import Image
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet, TA_CENTER
from reportlab.graphics import barcode
import datetime
import json

styles=getSampleStyleSheet()
styleN = styles['Normal']
styleH = styles['Heading1']
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

class FullPageImage(Flowable):
    def __init__(self , img):
        Flowable.__init__(self)
        self.image = img

    def draw(self):
        img = utils.ImageReader(self.image)

        iw, ih = img.getSize()
        aspect = ih / float(iw)
        width, self.height = PAGE_SIZE
        width -= 3.5*cm
        self.canv.drawImage(os.path.join(BASE_DIR , self.image) , -1 *MARGIN_SIZE + 1.5*cm , -1* self.height + 5*cm , width, aspect*width)

class expanseReportHead(Flowable):

    def __init__(self , data):
        Flowable.__init__(self)
        self.data = data
    #----------------------------------------------------------------------
    def draw(self):
        """
        draw the floable
        """

        pSrc = '''
        <font size=14>Expense sheet</font><br/>
        <font size=8>
        <strong>Generated by:</strong> %s<br/>
        <strong>On:</strong> %s<br/><br/>
        </font>
        ''' % ('%s %s (Emp ID : %s)'%(self.data.first_name , self.data.last_name , self.data.pk), datetime.datetime.now().strftime("%d-%B-%Y - %H:%M %p"))

        story = []
        head = Paragraph(pSrc , styleN)
        head.wrapOn(self.canv , 100*mm, 50*mm)
        head.drawOn(self.canv , 0*mm, -10*mm)

        # barcode_value = "1234567890"
        # barcode39 = barcode.createBarcodeDrawing('EAN13', value = barcode_value,barWidth=0.3*mm,barHeight=10*mm)
        #
        # barcode39.drawOn(self.canv,160*mm,0*mm)
        self.canv.drawImage(os.path.join(BASE_DIR , 'logo.png') , 80*mm , 0*mm , 2*cm, 2*cm)

def addPageNumber(canvas, doc):
    """
    Add the page number
    """
    barcode_value = doc.data['barCode']
    barcode39 = barcode.createBarcodeDrawing('EAN13', value = barcode_value,barWidth=0.3*mm,barHeight=10*mm)

    barcode39.drawOn(canvas,160*mm,270*mm)
    # page_num = canvas.getPageNumber()
    # text = "<font size='8'>Page #%s</font>" % page_num
    # p = Paragraph(text , styleN)
    # p.wrapOn(canvas , 50*mm , 10*mm)
    # p.drawOn(canvas , 100*mm , 10*mm)



class PageNumCanvas(canvas.Canvas):

    #----------------------------------------------------------------------
    def __init__(self, *args, **kwargs):
        """Constructor"""
        canvas.Canvas.__init__(self, *args, **kwargs)
        self.pages = []

    #----------------------------------------------------------------------
    def showPage(self):
        """
        On a page break, add information to the list
        """
        self.pages.append(dict(self.__dict__))
        self._startPage()

    #----------------------------------------------------------------------
    def save(self):
        """
        Add the page number to each page (page x of y)
        """
        page_count = len(self.pages)

        for page in self.pages:
            self.__dict__.update(page)
            self.draw_page_number(page_count)
            canvas.Canvas.showPage(self)

        canvas.Canvas.save(self)


    #----------------------------------------------------------------------
    def draw_page_number(self, page_count):
        """
        Add the page number
        """

        text = "<font size='8'>Page #%s of %s</font>" % (self._pageNumber , page_count)
        p = Paragraph(text , styleN)
        p.wrapOn(self , 50*mm , 10*mm)
        p.drawOn(self , 100*mm , 10*mm)

        # page = "Page %s of %s" % (, page_count)
        # self.setFont("Helvetica", 9)
        # self.drawRightString(195*mm, 272*mm, page)


MARGIN_SIZE = 8 * mm
PAGE_SIZE = A4

def buildPDF(pdfdoc, sheet , usr):
    scans = []
    now = datetime.datetime.now()

    pdf_doc = SimpleDocTemplate(pdfdoc, pagesize = PAGE_SIZE,
        leftMargin = MARGIN_SIZE, rightMargin = MARGIN_SIZE,
        topMargin = 4*MARGIN_SIZE, bottomMargin = 3*MARGIN_SIZE)


    # data = [['', '', '', 'Grand Total', '' , pFooterGrandTotal]]

    text_data = ["S. No", "Vendor", "Vendor Name", "Description", "Date", "Invoice ID", "Amount (INR)"]

    d = []
    font_size = 8
    centered = ParagraphStyle(name="centered", alignment=TA_CENTER)
    for text in text_data:
        ptext = "<font size=%s><b>%s</b></font>" % (font_size, text)
        p = Paragraph(ptext, centered)
        d.append(p)

    data = [d]
    line_num = 1
    formatted_line_data = []
    totalAmount = 0
    for i in sheet['invoices']:
        service = i['service']
        dt = i['dated']

        try:
            dateStr = dt.toString('dd-MMM-yyyy')
        except:
            dateStr = dt.strftime("%d-%m-%Y")

        line_data = [str(line_num),str(service['pk']), service['name'], i['description'], dateStr, i['pk'], i['amount']]

        if i['attachment'] is None:
            scans.append(i['file'])
        else:
            scans.append(os.path.join( BASE_DIR, 'temp', i['attachment'].split('/')[-1]))
        totalAmount += i['amount']
        for item in line_data:
            ptext = "<font size=%s>%s</font>" % (font_size-1, item)
            p = Paragraph(ptext, centered)
            formatted_line_data.append(p)
        data.append(formatted_line_data)
        formatted_line_data = []
        line_num += 1

    t = Table(data, colWidths=[35, 40, 100, 220, 50, 50, 50])

    ts = TableStyle([('LINEABOVE',(0,0),(-1,0),0.25,colors.gray),
                ('LINEABOVE',(0,1),(-1,1),0.25,colors.gray),
                ('GRID', (0,0), (-1,-1), 1, colors.black),
            ])

    t.setStyle(ts)

    #add some flowables



    story = []

    expHead = expanseReportHead(usr)
    story.append(expHead)
    story.append(Spacer(2.5,0.75*cm))
    story.append(t)
    story.append(Spacer(2.5,0.75*cm))

    summryParaSrc = """
    <font size='12'>Total amount : %s</font>

    """ %(totalAmount)
    story.append(Paragraph(summryParaSrc , styleN))

    for s in scans:
        story.append(PageBreak())
        story.append(FullPageImage(s))

    pdf_doc.data = {'barCode' : '%s%s'%(datetime.datetime.now().strftime("%m%Y"), sheet['pk']) }

    pdf_doc.build(story,onFirstPage=addPageNumber, onLaterPages=addPageNumber, canvasmaker=PageNumCanvas)

    # c.showPage()
    # c.save()

if __name__ == '__main__':

    sheetJSONStr = """{"pk":1,"user":2,"created":"2016-12-02T10:04:34.203000Z","approved":false,"approvalMatrix":3,"approvalStage":1,"dispensed":false,"notes":"first sheet","project":{"pk":3,"title":"proj1","description":"sdas"},"transaction":1,"invoices":[{"pk":1,"user":2,"created":"2016-12-09T06:43:29.158000Z","service":{"pk":1,"created":"2016-11-16T14:12:41.235000Z","name":"Service 1","user":2,"cin":"CIN123","tin":"TIN123","address":{"pk":1,"street":"street1","city":"city1","state":"state1","pincode":201301,"lat":"12","lon":"13"},"mobile":9876543210,"telephone":"9876543210","logo":"gitlab.com","about":"test","doc":null},"amount":123,"currency":"INR","dated":"2001-01-01","attachment":"http://127.0.0.1:8000/media/finance/invoices/1481265809_16_pradeep.yadav_New_Doc_6_1.jpg","sheet":1,"description":"a desc text","approved":false},{"pk":3,"user":72,"created":"2016-12-16T18:12:05.248555Z","service":{"pk":3,"created":"2016-11-16T14:16:38.984000Z","name":"service 2","user":2,"cin":"CIN1234","tin":"CIN1234","address":{"pk":3,"street":"Street 2","city":"City 2","state":"State 2","pincode":201301,"lat":"13","lon":"14"},"mobile":9876543210,"telephone":"123456789","logo":"gitlab.com","about":"another service","doc":null},"amount":1000,"currency":"INR","dated":"2017-01-01","attachment":"http://127.0.0.1:8000/media/finance/invoices/1481911925_25_admin_scan.jpg","sheet":1,"description":"a desc text from python","approved":false},{"pk":4,"user":72,"created":"2016-12-16T18:16:04.244139Z","service":{"pk":1,"created":"2016-11-16T14:12:41.235000Z","name":"Service 1","user":2,"cin":"CIN123","tin":"TIN123","address":{"pk":1,"street":"street1","city":"city1","state":"state1","pincode":201301,"lat":"12","lon":"13"},"mobile":9876543210,"telephone":"9876543210","logo":"gitlab.com","about":"test","doc":null},"amount":1000,"currency":"INR","dated":"2017-01-02","attachment":"http://127.0.0.1:8000/media/finance/invoices/1481912164_24_admin_scan.jpg","sheet":1,"description":"a desc text from python","approved":false}]}"""
    from libreerp.ui import getLibreUser

    usr = getLibreUser()
    sheet = json.loads(sheetJSONStr)
    buildPDF( '.out.pdf', sheet, usr)
